# Generated by Django 5.2.7 on 2025-10-09 13:12

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0042_add_scenario_archiving'),
    ]

    operations = [
        migrations.CreateModel(
            name='SSCalculationCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary_claiming_age', models.FloatField()),
                ('spouse_claiming_age', models.FloatField(blank=True, null=True)),
                ('life_expectancy_primary', models.IntegerField()),
                ('life_expectancy_spouse', models.IntegerField(blank=True, null=True)),
                ('calculation_results', models.JSONField(help_text='Full year-by-year calculation results')),
                ('summary_results', models.JSONField(help_text='Summary metrics (lifetime benefits, taxes, etc.)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='When this cache entry expires (24 hours)')),
                ('scenario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ss_calculation_cache', to='core.scenario')),
            ],
            options={
                'verbose_name': 'SS Calculation Cache',
                'verbose_name_plural': 'SS Calculation Caches',
                'indexes': [models.Index(fields=['scenario', 'primary_claiming_age', 'spouse_claiming_age'], name='ss_planning_scenari_f8c7eb_idx'), models.Index(fields=['expires_at'], name='ss_planning_expires_80c772_idx')],
                'unique_together': {('scenario', 'primary_claiming_age', 'spouse_claiming_age', 'life_expectancy_primary', 'life_expectancy_spouse')},
            },
        ),
        migrations.CreateModel(
            name='SSStrategy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="User-defined name (e.g., 'Conservative', 'Max Survivor')", max_length=100)),
                ('is_active', models.BooleanField(default=False, help_text='Whether this is the currently applied strategy')),
                ('primary_claiming_age', models.FloatField(help_text="Primary client's claiming age (62-70)")),
                ('spouse_claiming_age', models.FloatField(blank=True, help_text="Spouse's claiming age (62-70)", null=True)),
                ('optimization_goal', models.CharField(choices=[('maximize_lifetime', 'Maximize Lifetime Benefits'), ('maximize_liquidity', 'Preserve Asset Liquidity'), ('maximize_survivor', 'Maximize Survivor Benefits'), ('minimize_taxes', 'Minimize Tax Burden')], default='maximize_lifetime', max_length=50)),
                ('health_status_primary', models.CharField(choices=[('poor', 'Poor'), ('fair', 'Fair'), ('good', 'Good'), ('excellent', 'Excellent')], default='good', max_length=20)),
                ('health_status_spouse', models.CharField(blank=True, choices=[('poor', 'Poor'), ('fair', 'Fair'), ('good', 'Good'), ('excellent', 'Excellent')], default='good', max_length=20, null=True)),
                ('life_expectancy_primary', models.IntegerField(help_text='Expected age at death for primary client')),
                ('life_expectancy_spouse', models.IntegerField(blank=True, help_text='Expected age at death for spouse', null=True)),
                ('earned_income_primary', models.DecimalField(decimal_places=2, default=0, help_text='Annual earned income if claiming before FRA', max_digits=10)),
                ('earned_income_spouse', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('wep_applies', models.BooleanField(default=False, help_text='Windfall Elimination Provision applies')),
                ('gpo_applies', models.BooleanField(default=False, help_text='Government Pension Offset applies')),
                ('pension_amount', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Monthly government pension amount', max_digits=10, null=True)),
                ('lifetime_benefits_total', models.DecimalField(blank=True, decimal_places=2, help_text='Total lifetime benefits for both spouses', max_digits=12, null=True)),
                ('lifetime_benefits_primary', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('lifetime_benefits_spouse', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('total_taxes', models.DecimalField(blank=True, decimal_places=2, help_text='Total taxes paid on SS benefits over lifetime', max_digits=12, null=True)),
                ('total_irmaa', models.DecimalField(blank=True, decimal_places=2, help_text='Total IRMAA surcharges over lifetime', max_digits=10, null=True)),
                ('net_lifetime_benefits', models.DecimalField(blank=True, decimal_places=2, help_text='Lifetime benefits minus taxes and IRMAA', max_digits=12, null=True)),
                ('optimal_rank', models.IntegerField(blank=True, help_text='Rank among all possible strategies (1 = best)', null=True)),
                ('percentage_of_maximum', models.FloatField(blank=True, help_text='Percentage of maximum possible lifetime benefits', null=True)),
                ('notes', models.TextField(blank=True, help_text='User notes about this strategy')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('calculated_at', models.DateTimeField(blank=True, help_text='When calculations were last run', null=True)),
                ('scenario', models.ForeignKey(help_text='Parent scenario for this strategy', on_delete=django.db.models.deletion.CASCADE, related_name='ss_strategies', to='core.scenario')),
            ],
            options={
                'verbose_name': 'SS Strategy',
                'verbose_name_plural': 'SS Strategies',
                'ordering': ['-is_active', '-created_at'],
                'indexes': [models.Index(fields=['scenario', 'is_active'], name='ss_planning_scenari_da90d7_idx'), models.Index(fields=['scenario', 'created_at'], name='ss_planning_scenari_bc0aa1_idx')],
            },
        ),
    ]
